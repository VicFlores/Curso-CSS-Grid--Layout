* Palabras claves

Grid Container: va a ser el elemento padre que va a tener puesto un nuevo tipo de display: grid. Nos permite colocar otras propiedades para manipular nuestro layaout.

Grid Item: Son nuestro componentes, contenido, lo que vamos a manejar. Nuestras filas o columnas que vamos a mover a nuestro gusto. Son hijos directos de grid.

Grid Line: Lineas divisorias horizontales y verticales.

Grid Track: Espacio entre dos líneas adyacentes. Filas y columnas.

Grid Cell: Celdas, espacio en dos filas adyacentes y 2 columnas adyacentes.

Grid Area: Espacio rodeado por 4 grid lines

Grid explicito (explicit grid): es cuando nosotros definimos el numero de filas o columnas.
Grid implicito (implicit grid): es cuando tenemos filas o columnas que no definimos pero son parte de nuestro grid.

----------------------------------------------------------------------------------------------------------

* Como poner filas y columnas

grid-template-columns: 200px 200px 200px; Tamaño de columnas, la cantidad de valores son las columnas que quiero
	
grid-template-rows: 200px 300px; Tamaño de filas, la cantidad de valores son las filas que quiero

FORMA RESUMIDA: 

grid-template: filas / columnas;
grid-template: 300px 150px / 200px 200px 200px;

----------------------------------------------------------------------------------------------------------

Espaciado entre filas y columnas

Importante: Chrome 66 hizo cambios en css-grid, específicamente en gap y ahora es simplemente gap:

grid-grap => gap
grid-row-gap => row-grap
grid-column-grap => column-grap

----------------------------------------------------------------------------------------------------------

Unidad de medida: fracciones fr distribuye el espacio disponible en formas iguales.

Funciones:
repeat(cantidad, valor) para usar el mismo valor varias veces
minmax(min, max) agregar un valor minimo y maximo para el tamaño al hacer responsive

----------------------------------------------------------------------------------------------------------

Construir layout del sitio

* Designamos en el contenedor padre esta propiedad y como valores utilizamos palabras alusivas a lo 
que contendrá dicho apartado, repetimos palabras para que tome la siguiente columna el mismo valor

	grid-template-areas: 	"header header"
												"left content"
												"footer footer";


* A los elementos hijos le designamos esta otra propiedad con los valores anteriormente establecidos

.header {
	grid-area: header;
}

.left {
	grid-area: left;
}

.content {
	grid-area: content;
}

.footer {
	grid-area: footer;
}


----------------------------------------------------------------------------------------------------------

* Definir el tamaño de las columnas dentro de un grid:

grid-column-start: 1;
grid-column-end: 3;

Para escribir esto en una sola linea:

grid-column: inicio / final;
Para usar por espacios: span #
Para usar el espacio de toda la columna usamos -1 al final Ejemplo: grid-column: 1/ -1;

* Definir el tamaño de las filas dentro de un grid:

grid-row: 1 / span 2;

----------------------------------------------------------------------------------------------------------

Para nombrar lineas colocamos el nombre entre [ ]. Ejemplo:

grid-template-columns: [inicio] 1fr [linea2] 1fr [final];
En estos casos no podemos usar la función repeat()

----------------------------------------------------------------------------------------------------------

Para cambiar el flujo automático de mi grid:

grid-auto-flow: column;
Por defecto viene grid-auto-flow: row;
Para asignar el valor por defecto de el espacio de las columnas o filas que no han sido asignadas:

grid-auto-columns: valores;
grid-auto-rows: valores;

----------------------------------------------------------------------------------------------------------

* Para alinear contenido:

justify-items: valor; para alineación horizontal
align-items: valor; para alineación vertical
Los valores que toman por defecto es stretch el cual hace que tomen todo el valor asignado en la fila o columna.

* Para asignar la alineación de un solo elemento podemos usar:

align-self: valor;
justify-self: valor;

----------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------